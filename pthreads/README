ABOUT 
	This is about pthreads

FILES
	simple.c 	This just creates a pthread a joins
			see what happens when you do a ps
				You can ^Z and then look at ps -eLF
				Look for the PID/PPID/LWP/NLWP columns
			what happens when one of them exits
			
	     other things to try with this file:
		pthread_self(); returns the threads on pthread_t
		pthread_equal(pthread_t,pthread_t) compares the two pthread_ts
		pthread_cancel(pthread_t) cancels 
			(causes to potentially pthread_exit()) the thread 

	update_balance.c
			This creates multiple threads to update a balance
			You can configure number of threads too
			This demonstrates race.
			nanosleep is introduced to increase chance of race.
	update_balance_mutex.c
			You can turn on/off mutex
			This is used to demonstrate that mutexes avoid
			race.

	find_some_primes.c
			This is two threads - one producing numbers
			The other checking it is prime
			Extending this to multiple producers or consumers
			requires more synchronisation!

	find_some_primes_2r.c
			This like the above but an additional reader.
			Demonstrates race.
			nanosleep is used to increase chance of race.

	find_some_primes_mutex.c
			This is like the above with 2 readers.
			Demonstrates use of mutex to avoid race.

	find_some_primes_cv.c
			This is like the above with 2 readers.
			Demonstrates use of cond vars to avoid busy wait.

	find_some_primes_cv_many.c
			This is like the above, using cv.
			code is rewritten a bit.
			Deals with an arbitrary number of readers and
				writers.
			Demonstrates use of cond_broadcast.

	prod_con.c	This is an implementation of the producer 
			consumer problem using pthreads and synchronisation

	     Also uses:
	     safe_ops.c / safe_ops.h : Simplified implementation of put/get

RUNNING
	./simple 	for the simple.c example

	./update_balance
			Creates 50 threads by default

	./pc		for the producer-consumer example. Change 
			# threads if you wish by editing prod_con.c
	
	./find_some_primes
			This will create two threads.
			You can change MAX to see one of them wait 
				for the other.
			100 items are output. * indicates non-prime
	./find_some_primes_2r
			With nanosleep enabled you can see it 
			doesn't generate theright count of outputs. 
			Then careful study shows some are duplicate!
			Clearly a race on "rear"!
			

